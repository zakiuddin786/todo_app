#SPDX-License-Identifier: MIT-0
---
# tasks file for docker

- name: Start and enable Docker service
  service:
    name: docker
    state: started
    enabled: yes
  become: yes

- name: Create Docker group
  group: 
    name: docker
    state: present

- name: Add user to Docker group
  user: 
    name: "{{ ansible_user }}"
    group: docker
    append: yes
  become: yes

# - name: Run Docker Compose
#   community.docker.docker_compose_v2:
#     project_src: /opt/todo-app
#     state: present
#   become: yes

- name: Verify IAM role using AWS CLI
  shell: aws sts get-caller-identity
  register: aws_cli_check

- name: Debug CLI Check
  debug:
    var: aws_cli_check

- name: Assume IAM role
  shell: |
    aws sts assume-role --role-arn {{ role_arn }} --role-session-name Ec2EcrSession
  register: assume_role_result

- name: Debug IAM role result
  debug:
    var: assume_role_result

- name: Set AWS credentials
  set_fact:
    aws_access_key: "{{ (assume_role_result.stdout | from_json ).Credentials.AccessKeyId }}"
    aws_secret_key: "{{ (assume_role_result.stdout | from_json ).Credentials.SecretAccessKey }}"
    aws_session_token: "{{ (assume_role_result.stdout | from_json ).Credentials.SessionToken }}"

- name: Get ECR login token
  shell: |
    aws ecr get-login-password --region {{ aws_region }} 
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
    AWS_SESSION_TOKEN: "{{ aws_session_token }}"
  register: ecr_token

- name: Debug ECR Token
  debug: 
    var: ecr_token

- name: Login into ECR registry
  community.docker.docker_login:
    registry_url: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com"
    username: AWS
    password: "{{ ecr_token.stdout }}"
    reauthorize: yes
  register: docker_login_result

- name: Debug ECR Token
  debug: 
    var: docker_login_result

- name: Get Backend ECR repository information
  shell: | 
    aws ecr describe-repositories --repository-names {{ backend_ecr_repository_name }} --region {{ aws_region }}
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_key }}"
    AWS_SESSION_TOKEN: "{{ aws_session_token }}"
  register: backend_ecr_repo

- name: Pull latest Backend image
  docker_image:
    name: "{{ backend_ecr_uri }}:latest"
    source: pull
    force_source: yes